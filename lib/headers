#!/bin/bash

http_header_referrer() {
	[[ -z $header_referrer || $header_referrer == "true" ]] && read -p "${blu}Referrer header value: ${end}" header_referrer
	if ! [[ $header_referrer =~ ^(no-referrer|no-referrer-when-downgrade|origin|origin-when-cross-origin|same-origin|strict-origin|strict-origin-when-cross-origin|unsafe-url)$ ]]; then
		echo "${red}[ERROR] Invalid referrer header value!${end}"
		exit 1
	fi
	
	conf_write header-referrer $header_referrer
	[[ $(conf_read nginx) == "true" ]] && sudo sed -i "/^add_header Referrer-Policy /c\add_header Referrer-Policy \"$header_referrer\";" /etc/nginx/common/headers-html.conf
	echo "${gre}HTTP Header successfully configured!${end}"
}


http_header_hsts() {
	[[ -z $header_hsts || $header_hsts == "true" ]] && read -p "${blu}HSTS header value: ${end}" header_hsts
	if ! [[ $header_hsts =~ ^([0-9]+|off|preload|default)$ ]]; then
		echo "${red}[ERROR] Invalid HSTS header value!${end}"
		exit 1
	elif [[ $header_hsts =~ ^[0-9]+$ && $header_hsts -gt 31536000 ]]; then
		echo "${red}[ERROR] HSTS max-age greater than 1 year not allowed without preload (2 years).${end}"
		exit 1
	fi
	
	if [[ $(conf_read nginx) == "true" ]]; then
		if [[ $header_hsts == "off" ]]; then
			sudo sed -i '/^add_header Strict-Transport-Security /s/^/#/' /etc/nginx/common/headers-https.conf
		else
			local set_hsts="$header_hsts; includeSubDomains"
			[[ $header_hsts == "default" ]] && set_hsts="31536000"
			[[ $header_hsts == "preload" ]] && set_hsts="63072000; includeSubDomains; preload"
			sudo sed -Ei "/^#?add_header Strict-Transport-Security /c\add_header Strict-Transport-Security \"max-age=${set_hsts}\";" /etc/nginx/common/headers-https.conf
		fi
	fi
	
	[[ $header_hsts == "default" ]] && conf_delete header-hsts || conf_write header-hsts $header_hsts
	[[ $header_hsts == "off" ]] && echo "${gre}HSTS Header successfully disabled!${end}" || echo "${gre}HTTP Header successfully configured!${end}"
}


http_header_csp() {
	if ! [[ $header_csp =~ ^(true|on|off|reset)$ ]]; then
		echo "${red}[ERROR] Please, enter a valid option for CSP header!${end}"
		exit 1
	elif [[ $header_csp =~ ^(on|true)$ && ! -s /opt/webinoly/templates/source/csp_webinoly.data ]]; then
		read -p "${blu}CSP header value: ${end}" csp_data
		
		if [[ -n $csp_data ]]; then
			sudo touch /opt/webinoly/templates/source/csp_webinoly.data
			sudo chmod 644 /opt/webinoly/templates/source/csp_webinoly.data
			sudo chown -R root:root /opt/webinoly/templates/source/csp_webinoly.data
			
			echo "$csp_data" >> /opt/webinoly/templates/source/csp_webinoly.data
			echo "${blu}${dim}CSP Header... saving data!${end}"
		fi
	elif [[ $header_csp =~ ^(true|on)$ && -s /opt/webinoly/templates/source/csp_webinoly.data ]]; then
		echo "${blu}${dim}Recovering existing saved data for CSP!${end}"
		csp_data=$(sed -n '1p' /opt/webinoly/templates/source/csp_webinoly.data)
	fi
	
	if [[ $header_csp =~ ^(true|on)$ && -z $csp_data ]]; then
		echo "${red}[ERROR] Invalid CSP header value!${end}"
		exit 1
	elif [[ $header_csp == "reset" ]]; then
		sudo sed -i '/^add_header Content-Security-Policy/s/^/#/' /etc/nginx/common/headers-html.conf
		sudo rm -rf /opt/webinoly/templates/source/csp_webinoly.data
		echo "${gre}CSP Header disabled and saved data successfully removed!${end}"
	elif [[ $(conf_read nginx) == "true" ]]; then
		if [[ $header_csp == "off" ]]; then
			sudo sed -i '/^add_header Content-Security-Policy/s/^/#/' /etc/nginx/common/headers-html.conf
			echo "${gre}CSP Header successfully disabled!${end}"
		elif [[ $header_csp =~ ^(true|on)$ ]]; then
			[[ $csp_report_only == "on" ]] && local cspro="-Report-Only"
			sudo sed -Ei "/^#?add_header Content-Security-Policy/d" /etc/nginx/common/headers-html.conf			
			sudo echo "add_header Content-Security-Policy${cspro} \"${csp_data}\";" >> /etc/nginx/common/headers-html.conf
			echo "${gre}CSP Header successfully configured!${end}"
		fi
	elif [[ $(conf_read nginx) != "true" ]]; then	
		if [[ $header_csp == "off" ]]; then
			echo "${red}[ERROR] NGINX is not installed!${end}"
			exit 1
		elif [[ $header_csp =~ ^(true|on)$ ]]; then
			echo "${gre}CSP Header successfully configured and it will be used next time NGINX is installed!${end}"
		fi
	fi
}


http_header_permission_policy() {
	if [[ $header_permission_policy == "floc" ]]; then
		[[ -f /opt/webinoly/templates/source/pph_webinoly.data ]] && sudo rm -rf /opt/webinoly/templates/source/pph_webinoly.data
		pph_data="interest-cohort=()"
	fi
	
	if ! [[ $header_permission_policy =~ ^(true|on|off|reset|floc)$ ]]; then
		echo "${red}[ERROR] Please, enter a valid option for Permissions Policy header!${end}"
		exit 1
	elif [[ $header_permission_policy =~ ^(on|true|floc)$ && ! -s /opt/webinoly/templates/source/pph_webinoly.data ]]; then
		[[ $header_permission_policy != "floc" ]] && read -p "${blu}Permissions Policy header value: ${end}" pph_data
		
		if [[ -n $pph_data ]]; then
			sudo touch /opt/webinoly/templates/source/pph_webinoly.data
			sudo chmod 644 /opt/webinoly/templates/source/pph_webinoly.data
			sudo chown -R root:root /opt/webinoly/templates/source/pph_webinoly.data
			
			echo "$pph_data" >> /opt/webinoly/templates/source/pph_webinoly.data
			echo "${blu}${dim}Permissions Policy Header... saving data!${end}"
		fi
	elif [[ $header_permission_policy =~ ^(true|on|floc)$ && -s /opt/webinoly/templates/source/pph_webinoly.data ]]; then
		echo "${blu}${dim}Recovering existing saved data for Permissions Policy!${end}"
		pph_data=$(sed -n '1p' /opt/webinoly/templates/source/pph_webinoly.data)
	fi
	
	if [[ $header_permission_policy =~ ^(true|on|floc)$ && -z $pph_data ]]; then
		echo "${red}[ERROR] Invalid Permissions Policy header value!${end}"
		exit 1
	elif [[ $header_permission_policy == "reset" ]]; then
		sudo sed -Ei '/^add_header Permission[s]?-Policy/s/^/#/' /etc/nginx/common/headers-html.conf
		sudo rm -rf /opt/webinoly/templates/source/pph_webinoly.data
		echo "${gre}Permissions Policy Header disabled and saved data successfully removed!${end}"
	elif [[ $(conf_read nginx) == "true" ]]; then
		if [[ $header_permission_policy == "off" ]]; then
			sudo sed -Ei '/^add_header Permission[s]?-Policy/s/^/#/' /etc/nginx/common/headers-html.conf
			echo "${gre}Permissions Policy Header successfully disabled!${end}"
		elif [[ $header_permission_policy =~ ^(true|on|floc)$ ]]; then
			sudo sed -Ei "/^#?add_header Permission[s]?-Policy/d" /etc/nginx/common/headers-html.conf			
			sudo echo "add_header Permissions-Policy \"${pph_data}\";" >> /etc/nginx/common/headers-html.conf
			echo "${gre}Permissions Policy Header successfully configured!${end}"
		fi
	elif [[ $(conf_read nginx) != "true" ]]; then	
		if [[ $header_permission_policy == "off" ]]; then
			echo "${red}[ERROR] NGINX is not installed!${end}"
			exit 1
		elif [[ $header_permission_policy =~ ^(true|on|floc)$ ]]; then
			echo "${gre}Permissions Policy Header successfully configured and it will be used next time NGINX is installed!${end}"
		fi
	fi
}


http_header_cache_control() {
	if ! [[ $header_cache_control =~ ^(true|on|off|reset)$ ]]; then
		echo "${red}[ERROR] Please, enter a valid option for Cache Control header!${end}"
		exit 1
	elif [[ $header_cache_control =~ ^(on|true)$ && ! -s /opt/webinoly/templates/source/cch_webinoly.data ]]; then
		read -p "${blu}Cache Control header value: ${end}" cch_data
		
		if [[ -n $cch_data ]]; then
			sudo touch /opt/webinoly/templates/source/cch_webinoly.data
			sudo chmod 644 /opt/webinoly/templates/source/cch_webinoly.data
			sudo chown -R root:root /opt/webinoly/templates/source/cch_webinoly.data
			
			echo "$cch_data" >> /opt/webinoly/templates/source/cch_webinoly.data
			echo "${blu}${dim}Cache Control Header... saving data!${end}"
		fi
	elif [[ $header_cache_control =~ ^(true|on)$ && -s /opt/webinoly/templates/source/cch_webinoly.data ]]; then
		echo "${blu}${dim}Recovering existing saved data for Cache Control!${end}"
		cch_data=$(sed -n '1p' /opt/webinoly/templates/source/cch_webinoly.data)
	fi
	
	if [[ $header_cache_control =~ ^(true|on)$ && -z $cch_data ]]; then
		echo "${red}[ERROR] Invalid Cache Control header value!${end}"
		exit 1
	elif [[ $header_cache_control == "reset" ]]; then
		sudo sed -i '/^add_header Cache-Control/s/^/#/' /etc/nginx/common/headers-html.conf
		sudo rm -rf /opt/webinoly/templates/source/cch_webinoly.data
		echo "${gre}Cache Control Header disabled and saved data successfully removed!${end}"
	elif [[ $(conf_read nginx) == "true" ]]; then
		if [[ $header_cache_control == "off" ]]; then
			sudo sed -i '/^add_header Cache-Control/s/^/#/' /etc/nginx/common/headers-html.conf
			echo "${gre}Cache Control Header successfully disabled!${end}"
		elif [[ $header_cache_control =~ ^(true|on)$ ]]; then
			sudo sed -Ei "/^#?add_header Cache-Control/d" /etc/nginx/common/headers-html.conf			
			sudo echo "add_header Cache-Control \"${cch_data}\";" >> /etc/nginx/common/headers-html.conf
			echo "${gre}Cache Control Header successfully configured!${end}"
		fi
	elif [[ $(conf_read nginx) != "true" ]]; then	
		if [[ $header_cache_control == "off" ]]; then
			echo "${red}[ERROR] NGINX is not installed!${end}"
			exit 1
		elif [[ $header_cache_control =~ ^(true|on)$ ]]; then
			echo "${gre}Cache Control Header successfully configured and it will be used next time NGINX is installed!${end}"
		fi
	fi
}


http_header_robots() {
	if ! [[ $header_robots =~ ^(true|on|off|reset)$ ]]; then
		echo "${red}[ERROR] Please, enter a valid option for X-Robots-Tag header!${end}"
		exit 1
	elif [[ $header_robots =~ ^(on|true)$ && ! -s /opt/webinoly/templates/source/rob_webinoly.data ]]; then
		read -p "${blu}X-Robots-Tag header value: ${end}" rob_data
		
		if [[ -n $rob_data ]]; then
			sudo touch /opt/webinoly/templates/source/rob_webinoly.data
			sudo chmod 644 /opt/webinoly/templates/source/rob_webinoly.data
			sudo chown -R root:root /opt/webinoly/templates/source/rob_webinoly.data
			
			echo "$rob_data" >> /opt/webinoly/templates/source/rob_webinoly.data
			echo "${blu}${dim}X-Robots-Tag Header... saving data!${end}"
		fi
	elif [[ $header_robots =~ ^(true|on)$ && -s /opt/webinoly/templates/source/rob_webinoly.data ]]; then
		echo "${blu}${dim}Recovering existing saved data for X-Robots-Tag!${end}"
		rob_data=$(sed -n '1p' /opt/webinoly/templates/source/rob_webinoly.data)
	fi
	
	if [[ $header_robots =~ ^(true|on)$ && -z $rob_data ]]; then
		echo "${red}[ERROR] Invalid X-Robots-Tag header value!${end}"
		exit 1
	elif [[ $header_robots == "reset" ]]; then
		sudo sed -i '/^add_header X-Robots-Tag/s/^/#/' /etc/nginx/common/headers-http.conf
		sudo rm -rf /opt/webinoly/templates/source/rob_webinoly.data
		echo "${gre}X-Robots-Tag Header disabled and saved data successfully removed!${end}"
	elif [[ $(conf_read nginx) == "true" ]]; then
		if [[ $header_robots == "off" ]]; then
			sudo sed -i '/^add_header X-Robots-Tag/s/^/#/' /etc/nginx/common/headers-http.conf
			echo "${gre}X-Robots-Tag Header successfully disabled!${end}"
		elif [[ $header_robots =~ ^(true|on)$ ]]; then
			sudo sed -Ei "/^#?add_header X-Robots-Tag/d" /etc/nginx/common/headers-http.conf			
			sudo echo "add_header X-Robots-Tag \"${rob_data}\";" >> /etc/nginx/common/headers-http.conf
			echo "${gre}X-Robots-Tag Header successfully configured!${end}"
		fi
	elif [[ $(conf_read nginx) != "true" ]]; then	
		if [[ $header_robots == "off" ]]; then
			echo "${red}[ERROR] NGINX is not installed!${end}"
			exit 1
		elif [[ $header_robots =~ ^(true|on)$ ]]; then
			echo "${gre}X-Robots-Tag Header successfully configured and it will be used next time NGINX is installed!${end}"
		fi
	fi
}


http_header_xssp() {
	if ! [[ $header_xssp =~ ^(on|off)$ ]]; then
		echo "${red}[ERROR] Please, enter a valid option for X-XSS-Protection header!${end}"
		exit 1
	fi
	
	if [[ $(conf_read nginx) == "true" ]]; then
		if [[ $header_xssp == "off" ]]; then
			conf_write header-xssp false
			sudo sed -i '/^add_header X-XSS-Protection/s/^/#/' /etc/nginx/common/headers-http.conf
			echo "${gre}X-XSS-Protection Header successfully disabled!${end}"
		elif [[ $header_xssp == "on" ]]; then
			conf_delete header-xssp
			sudo sed -Ei "/^#?add_header X-XSS-Protection/d" /etc/nginx/common/headers-http.conf			
			sudo echo "add_header X-XSS-Protection \"1; mode=block\";" >> /etc/nginx/common/headers-http.conf
			echo "${gre}X-XSS-Protection Header successfully configured!${end}"
		fi
	elif [[ $(conf_read nginx) != "true" ]]; then	
		if [[ $header_xssp == "off" ]]; then
			conf_write header-xssp false
			echo "${gre}X-XSS-Protection Header successfully configured and it will be disabled next time NGINX is installed!${end}"
		elif [[ $header_xssp == "on" ]]; then
			conf_delete header-xssp
			echo "${gre}X-XSS-Protection Header successfully configured and it will be used next time NGINX is installed!${end}"
		fi
	fi
}


http_header_xcto() {
	if ! [[ $header_xcto =~ ^(on|off)$ ]]; then
		echo "${red}[ERROR] Please, enter a valid option for X-Content-Type-Options header!${end}"
		exit 1
	fi
	
	if [[ $(conf_read nginx) == "true" ]]; then
		if [[ $header_xcto == "off" ]]; then
			conf_write header-xcto false
			sudo sed -i '/^add_header X-Content-Type-Options/s/^/#/' /etc/nginx/common/headers-http.conf
			echo "${gre}X-Content-Type-Options Header successfully disabled!${end}"
		elif [[ $header_xcto == "on" ]]; then
			conf_delete header-xcto
			sudo sed -Ei "/^#?add_header X-Content-Type-Options/d" /etc/nginx/common/headers-http.conf			
			sudo echo "add_header X-Content-Type-Options nosniff;" >> /etc/nginx/common/headers-http.conf
			echo "${gre}X-Content-Type-Options Header successfully configured!${end}"
		fi
	elif [[ $(conf_read nginx) != "true" ]]; then	
		if [[ $header_xcto == "off" ]]; then
			conf_write header-xcto false
			echo "${gre}X-Content-Type-Options Header successfully configured and it will be disabled next time NGINX is installed!${end}"
		elif [[ $header_xcto == "on" ]]; then
			conf_delete header-xcto
			echo "${gre}X-Content-Type-Options Header successfully configured and it will be used next time NGINX is installed!${end}"
		fi
	fi
}


http_header_xfo() {
	if ! [[ $header_xfo =~ ^(off|deny|sameorigin|allow-from)$ ]]; then
		echo "${red}[ERROR] Please, enter a valid option for X-Frame-Options header!${end}"
		exit 1
	fi
	
	local param="${header_xfo^^}"
	if [[ $header_xfo == "allow-from" ]]; then
		[[ -z $url ]] && read -p "${blu}Allow-From URL: ${end}" url
		if [[ -z $url ]] || ! [[ $(is_url $url) =~ ^(http|https|ip|true)$ ]]; then
			echo "${red}[ERROR] Invalid URL!${end}"
			exit 1
		fi
		local param="\"${header_xfo^^} $url\""
		conf_write header-xfo-url $url
	else
		conf_delete header-xfo-url
	fi
	conf_write header-xfo $header_xfo
	
	if [[ $(conf_read nginx) == "true" ]]; then
		if [[ $header_xfo == "off" ]]; then
			sudo sed -i '/^add_header X-Frame-Options/s/^/#/' /etc/nginx/common/headers-http.conf
			echo "${gre}X-Frame-Options Header successfully disabled!${end}"
		elif [[ $header_xfo =~ ^(deny|sameorigin|allow-from)$ ]]; then
			sudo sed -Ei "/^#?add_header X-Frame-Options/d" /etc/nginx/common/headers-http.conf			
			sudo echo "add_header X-Frame-Options ${param};" >> /etc/nginx/common/headers-http.conf
			echo "${gre}X-Frame-Options Header successfully configured!${end}"
		fi
	elif [[ $(conf_read nginx) != "true" ]]; then	
		if [[ $header_xfo == "off" ]]; then
			echo "${gre}X-Frame-Options Header successfully configured and it will be disabled next time NGINX is installed!${end}"
		elif [[ $header_xfo =~ ^(deny|sameorigin|allow-from)$ ]]; then
			echo "${gre}X-Frame-Options Header successfully configured and it will be used next time NGINX is installed!${end}"
		fi
	fi
}


http_header_custom() {
	if ! [[ $custom_headers =~ ^(reload|remove)$ ]]; then
		echo "${red}[ERROR] Please, enter a valid option Custom Headers!${end}"
		exit 1
	fi
	
	if [[ $(conf_read nginx) == "true" ]]; then
		sudo sed -i '/WebinolyCustomHeaders/,/WebinolyCustomHeadersEnd/{/.*/d}' /etc/nginx/common/headers-http.conf
		sudo sed -i '/WebinolyCustomHeaders/,/WebinolyCustomHeadersEnd/{/.*/d}' /etc/nginx/common/headers-https.conf
		sudo sed -i '/WebinolyCustomHeaders/,/WebinolyCustomHeadersEnd/{/.*/d}' /etc/nginx/common/headers-html.conf
	fi
	
	if [[ $custom_headers == "reload" && $(conf_read nginx) == "true" ]]; then
		if [[ -s /opt/webinoly/templates/source/custom_header_http_webinoly.data ]]; then
			local http="$(sudo grep -E "^add_header .*;$" /opt/webinoly/templates/source/custom_header_http_webinoly.data)"
			if [[ -n $http ]]; then
				echo "# WebinolyCustomHeaders
$http
# WebinolyCustomHeadersEnd" >> /etc/nginx/common/headers-http.conf
			fi
		fi
		
		if [[ -s /opt/webinoly/templates/source/custom_header_https_webinoly.data ]]; then
			local https="$(sudo grep -E "^add_header .*;$" /opt/webinoly/templates/source/custom_header_https_webinoly.data)"
			if [[ -n $https ]]; then
				echo "# WebinolyCustomHeaders
$https
# WebinolyCustomHeadersEnd" >> /etc/nginx/common/headers-https.conf
			fi
		fi
		
		if [[ -s /opt/webinoly/templates/source/custom_header_html_webinoly.data ]]; then
			local html="$(sudo grep -E "^add_header .*;$" /opt/webinoly/templates/source/custom_header_html_webinoly.data)"
			if [[ -n $html ]]; then
				echo "# WebinolyCustomHeaders
$html
# WebinolyCustomHeadersEnd" >> /etc/nginx/common/headers-html.conf
			fi
		fi
		
		conf_write header-custom true
		echo "${gre}Custom Headers successfully configured!${end}"
	elif [[ $custom_headers == "reload" ]]; then
		conf_write header-custom true
		echo "${gre}Custom Headers successfully configured and it will be used next time NGINX is installed!${end}"
	else
		conf_delete header-custom
		echo "${gre}Custom Headers successfully removed!${end}"
	fi
}
